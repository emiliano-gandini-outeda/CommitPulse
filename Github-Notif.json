{
  "name": "Github-Notif",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.github.com/users/emiliano-gandini-outeda/repos?per_page=100",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        48
      ],
      "id": "1eaa5e8c-3534-418d-b316-0c56aa3992ac",
      "name": "Public Repos",
      "credentials": {
        "githubApi": {
          "id": "3oql2lVUm4yOfxkV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.github.com/users/emiliano-gandini-outeda/starred?per_page=100",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        -144
      ],
      "id": "a6a1e74c-b77e-4d92-96a1-b52ab634effa",
      "name": "Starred Repos",
      "credentials": {
        "githubApi": {
          "id": "3oql2lVUm4yOfxkV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allInput = $input.all();\n\nconst allRepos = allInput.map(item => ({\n  owner: item.json.owner.login,\n  repo: item.json.name\n}));\n\nreturn allRepos.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -32,
        -48
      ],
      "id": "e9239c6d-3229-4760-b81d-eba4be316fa6",
      "name": "Repo Cleanup"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -704,
        48
      ],
      "id": "f435eca8-5a17-4033-910e-f8058f4adf0c",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json[\"owner\"]}}/{{$json[\"repo\"]}}/commits?per_page=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        -120
      ],
      "id": "a415a098-c624-4214-8ad9-c8e61bc408ab",
      "name": "Commit Request",
      "credentials": {
        "githubApi": {
          "id": "3oql2lVUm4yOfxkV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomar todos los items de entrada y devolver solo owner, repo, sha y html_url\nreturn $input.all().map(item => ({\n  json: {\n    owner: item.json.owner,\n    repo: item.json.repo,\n    sha: item.json.sha,\n    html_url: item.json.html_url,\n    commit_message: item.json.commit.message\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -48
      ],
      "id": "fa643117-c8ae-44f2-a1a5-f0ab03562f79",
      "name": "Map Commits"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -256,
        -48
      ],
      "id": "1e65c5da-3354-49dd-9af2-dec1b4cf522f",
      "name": "Public + Starred"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        416,
        -48
      ],
      "id": "02435bfe-058f-4f93-ac77-b1e8708dc9b3",
      "name": "Repo + Commits"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "NmxaJpHLDd67PU5G",
          "mode": "list",
          "cachedResultName": "Github Tracking",
          "cachedResultUrl": "/projects/Pf61PhppcQlVLO9Y/datatables/NmxaJpHLDd67PU5G"
        },
        "matchType": "allConditions",
        "filters": {
          "conditions": [
            {
              "condition": "isNotEmpty"
            }
          ]
        },
        "returnAll": true
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        640,
        216
      ],
      "id": "c169e36f-79dc-4de4-878e-027a011ae0dc",
      "name": "Get Last Saved Commit"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "sha",
        "joinMode": "keepNonMatches",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        864,
        24
      ],
      "id": "295a5f00-e956-4210-9c36-0f4c4f977367",
      "name": "New + Old Commits"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\n// Separate input1 and input2 items\nconst input1Items = items.filter(i => i._source === \"input1\");\nconst input2Items = items.filter(i => i._source === \"input2\");\n\n// Build a map of input2 by owner/repo for quick lookup\nconst input2Map = {};\nfor (const item of input2Items) {\n    const key = `${item.owner}/${item.repo}`;\n    input2Map[key] = item;\n}\n\nconst results = [];\n\nfor (const item1 of input1Items) {\n    const key = `${item1.owner}/${item1.repo}`;\n    const item2 = input2Map[key];\n\n    if (item2) {\n        // If repo exists in input2, take owner/repo from input2 but sha/html_url/commit_message from input1\n        results.push({\n            json: {\n                owner: item2.owner,\n                repo: item2.repo,\n                sha: item1.sha,\n                html_url: item1.html_url,\n                commit_message: item1.commit_message,\n                notification: true\n            }\n        });\n    } else {\n        // If repo does not exist in input2, still return input1 with notification true\n        results.push({\n            json: {\n                owner: item1.owner,\n                repo: item1.repo,\n                sha: item1.sha,\n                html_url: item1.html_url,\n                commit_message: item1.commit_message,\n                notification: true\n            }\n        });\n    }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        24
      ],
      "id": "f663fe28-fa9a-46ca-a64f-9fad22b57670",
      "name": "Check Commits Diffs"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "NmxaJpHLDd67PU5G",
          "mode": "list",
          "cachedResultName": "Github Tracking",
          "cachedResultUrl": "/projects/Pf61PhppcQlVLO9Y/datatables/NmxaJpHLDd67PU5G"
        },
        "matchType": "allConditions",
        "filters": {
          "conditions": [
            {
              "keyName": "owner",
              "keyValue": "={{ $json.owner }}"
            },
            {
              "keyName": "repo",
              "keyValue": "={{ $json.repo }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "notification": "={{ $json.notification }}",
            "owner": "={{ $json.owner }}",
            "repo": "={{ $json.repo }}",
            "sha": "={{ $json.sha }}",
            "html_url": "={{ $json.html_url }}",
            "commit_message": "={{ $json.commit_message }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "owner",
              "displayName": "owner",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "repo",
              "displayName": "repo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "sha",
              "displayName": "sha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "html_url",
              "displayName": "html_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "notification",
              "displayName": "notification",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "commit_message",
              "displayName": "commit_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1536,
        192
      ],
      "id": "a8069d0a-49a6-466d-bc2d-68f211e5ae75",
      "name": "Save New Commits"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "799026853297065",
        "recipientPhoneNumber": "+598 93315227",
        "textBody": "={{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        2560,
        -48
      ],
      "id": "0aa2e430-3007-44d3-a2cc-7a19e9d935fd",
      "name": "Send message",
      "webhookId": "138871de-b6ab-4edc-821f-210def7fdabb",
      "retryOnFail": false,
      "credentials": {
        "whatsAppApi": {
          "id": "xs6dxP46VcoQ7CDz",
          "name": "WhatsApp account 3"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1536,
        -48
      ],
      "id": "727ba6ff-295f-4041-99aa-6c9031686eb8",
      "name": "Commit Info + Repo info"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/commits/{{ $json.sha }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1312,
        -120
      ],
      "id": "dc58ebef-a2cf-4ae2-a085-eee4d078bb5f",
      "name": "Commit Info Request",
      "credentials": {
        "githubApi": {
          "id": "3oql2lVUm4yOfxkV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: each item has owner, repo, html_url, commit_message, files\nconst items = $input.all();\n\nreturn items.map(item => {\n  const { owner, repo, html_url, commit_message, files, commit } = item.json;\n\n  // Handle commits without any changed files\n  const filesList = (files || [])\n    .map(f => {\n      const patchSnippet = f.patch ? `\\nPatch:\\n${f.patch}` : '';\n      return `- ${f.filename} (${f.status})${patchSnippet}`;\n    })\n    .join('\\n\\n');\n\n  // Construct the final prompt for the AI\n  const prompt = `\nYou are an expert software engineer assistant. \nWrite a WhatsApp-ready plain text message (max 4 lines) summarizing the commit below.\n\nRepository: ${owner}/${repo}\nCommit URL: ${html_url}\nCommitter: ${commit.author.name}\nCommit message: ${commit_message}\nFiles changed:\n${filesList || '- No files changed'}\n\nRules:\n- Output must be a single plain text block (no titles, subtitles, lists, or formatting).\n- Always start with: \"[Committer] made commit in [owner/repo].\"\n- If committer name contains \"bot\", replace it with \"An Automated Maintainer\".\n- Otherwise, mention the committer by their full name.\n- Use the committer’s username when referencing them.\n- Keep it natural and concise, maximum 7 lines of text.\n- End the message with the commit URL.\n`;\n\n  return { json: { prompt } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -48
      ],
      "id": "2a06fa4d-be31-4781-aa15-9b04ab8d96c3",
      "name": "Create Prompt"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n    let text = item.json.content?.parts?.[0]?.text || \"\";\n\n    // Remove outer quotes if they exist\n    if (text.startsWith('\"') && text.endsWith('\"')) {\n        text = text.slice(1, -1);\n    }\n\n    // Replace all escaped newlines (\\n) with spaces\n    text = text.replace(/\\\\n/g, \" \");\n\n    // Remove any actual newline characters\n    text = text.replace(/\\n/g, \" \");\n\n    // Collapse multiple spaces into a single space\n    text = text.replace(/\\s+/g, \" \").trim();\n\n    return { json: { text } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2336,
        -48
      ],
      "id": "db9d391a-7b01-4c04-a016-751beb7784f2",
      "name": "Format Output"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "={{$json.prompt}}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1984,
        -48
      ],
      "id": "83d0479d-9532-4745-993f-e9b64f9d844a",
      "name": "Create Message",
      "credentials": {
        "googlePalmApi": {
          "id": "aIM3dBDjAgkL5Z2S",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map(i => i.json);\n\nreturn items.map(item => ({\n  json: {\n    ...item,\n    notification: false\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        192
      ],
      "id": "dac1e729-1b5f-4deb-a313-bf163da54023",
      "name": "Set Notification To False"
    }
  ],
  "pinData": {},
  "connections": {
    "Public Repos": {
      "main": [
        [
          {
            "node": "Public + Starred",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Starred Repos": {
      "main": [
        [
          {
            "node": "Public + Starred",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Public Repos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Starred Repos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Last Saved Commit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Repo Cleanup": {
      "main": [
        [
          {
            "node": "Commit Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Repo + Commits",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Commit Request": {
      "main": [
        [
          {
            "node": "Repo + Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Public + Starred": {
      "main": [
        [
          {
            "node": "Repo Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Repo + Commits": {
      "main": [
        [
          {
            "node": "Map Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Commits": {
      "main": [
        [
          {
            "node": "New + Old Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last Saved Commit": {
      "main": [
        [
          {
            "node": "New + Old Commits",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "New + Old Commits": {
      "main": [
        [
          {
            "node": "Check Commits Diffs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Commits Diffs": {
      "main": [
        [
          {
            "node": "Set Notification To False",
            "type": "main",
            "index": 0
          },
          {
            "node": "Commit Info Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Commit Info + Repo info",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Save New Commits": {
      "main": [
        []
      ]
    },
    "Commit Info + Repo info": {
      "main": [
        [
          {
            "node": "Create Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Commit Info Request": {
      "main": [
        [
          {
            "node": "Commit Info + Repo info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Prompt": {
      "main": [
        [
          {
            "node": "Create Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Output": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Message": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Notification To False": {
      "main": [
        [
          {
            "node": "Save New Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "timeSavedPerExecution": 35
  },
  "versionId": "2f2806a1-a6f5-4055-a9b1-c035b00dbadc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "eef091074e5319af93e47f9691310ddeae256ba7798542d83f1c3e34eebbe161"
  },
  "id": "iqMUqrtHQQWVRi0q",
  "tags": []
}